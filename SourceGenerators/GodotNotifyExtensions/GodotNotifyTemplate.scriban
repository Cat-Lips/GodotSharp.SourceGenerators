using System;
using System.ComponentModel;

using Godot;

#nullable enable

{{~ Namespace ~}}

partial class {{ClassName}}
{
    public event Action? {{Name}}Changed;
    public event Action? {{Name}}Changing;

    [EditorBrowsable(EditorBrowsableState.Never)]
    private __GodotNotify{{Name}}? __{{Field}};

    private __GodotNotify{{Name}} _{{Field}}
        => __{{Field}} ??= new(this);

    private void Init{{Name}}({{Type}} value)
        => __{{Field}} ??= new(this, value);

    private bool Pause{{Name}}Events
    {
        get => _{{Field}}.PauseEvents;
        set => _{{Field}}.PauseEvents = value;
    }
{{~ if Modifiers | string.contains "partial" ~}}

    {{Modifiers}} {{Type}} {{Name}}
    {
{{~ if GetAccess ~}}
        {{GetAccess}}get => _{{Field}}.Get();
{{~ end ~}}
{{~ if SetAccess ~}}
        {{SetAccess}}set => _{{Field}}.Set(value);
{{~ end ~}}
    }
{{~ end ~}}

    [EditorBrowsable(EditorBrowsableState.Never)]
    private class __GodotNotify{{Name}}
    {
        private {{Type}} _value;
        public event Action? Changed;
        public event Action? Changing;
        private readonly {{ClassName}} gdObj;

        public bool PauseEvents { get; set; }

        public __GodotNotify{{Name}}({{ClassName}} gdObj, {{Type}} value = default!)
        {
            this.gdObj = gdObj;
            this._value = value;
        }

        public {{Type}} Get()
            => _value;

        public void Set({{Type}} value, Action? changed = null)
        {
            if (Equals(_value, value)) return;
{{~ if ValueIsResourceArray ~}}

            if (_value is not null)
            {
                foreach (var _v in _value)
                {
                    if (_v?.IsConnected(Resource.SignalName.Changed, Callable.From(OnDataChanged)) ?? false)
                        _v.Changed -= OnDataChanged;
                }
            }

            if (value is not null)
            {
                for (var i = 0; i < value.Length; ++i)
                    (value[i] ??= new()).Changed += OnDataChanged;;
            }
{{~ else if ValueIsResource ~}}

            if (_value?.IsConnected(Resource.SignalName.Changed, Callable.From(OnDataChanged)) ?? false) _value.Changed -= OnDataChanged;
            if (value is not null) value.Changed += OnDataChanged;
{{~ end ~}}

            OnDataChanging();
            _value = value;
            OnDataChanged();

            void OnDataChanging()
            {
                if (PauseEvents) return;
                Changing?.Invoke();
                gdObj.{{Name}}Changing?.Invoke();
            }

            void OnDataChanged()
            {
                if (PauseEvents) return;

                changed?.Invoke();
                Changed?.Invoke();
{{~ if ClassIsResource ~}}
                gdObj.EmitSignal("changed");
{{~ end ~}}
                gdObj.{{Name}}Changed?.Invoke();
            }
        }
    }
}
