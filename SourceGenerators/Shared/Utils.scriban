{{-#####-UTILS-#####-}}

{{-func TAB(count=1)-}}
    {{"    " * count}}
{{-end-}}

{{-func SAFE_NAME(node, depth)-}}
    {{node.Value.Name}}{{if node.Value.Name == node.Parent?.Value?.Name}}{{depth}}{{end}}
{{-end-}}

{{-func Scope(token=null)-}}
    {{~ if token ~}}
    {{~ if OuterType ~}}{{OuterType}}.{{ClassName}}.{{token}}{{~ else ~}}{{ClassName}}.{{token}}{{~ end ~}}
    {{~ else ~}}
    {{~ if OuterType ~}}{{OuterType}}.{{ClassName}}{{~ else ~}}{{ClassName}}{{~ end ~}}
    {{~ end ~}}
{{-end-}}

{{-func CurrentIndent(lines)
    for line in lines
        if !(line | string.whitespace)
            ret (line | regex.match('^ *'))[0].size
        end
    end
    ret 0
end-}}

{{-func Indent(text, count)
    pad = " " * count
    lines = text | regex.split '\n'
    current = CurrentIndent(lines)
    for idx in 0..(lines.size - 1)
        if !(lines[idx] | string.whitespace)
            lines[idx] = pad + (lines[idx] | string.slice current)
        end
    end
    ret lines | array.join '\n'
end-}}

{{-#######################-}}
{{-#####-RenderClass-#####-}}
{{-#######################-}}

{{-func RenderClass(body, extension_methods=null, helper_classes=null)-}}
using System;
using System.ComponentModel;

using Godot;

{{~ Namespace ~}}
{{~ if body ~}}

{{~ if OuterType ~}}
{{if IsStaticOuter}}static {{end}}partial class {{OuterType}}
{
    {{if IsStaticClass}}static {{end}}partial class {{ClassName}}
    {
        {{~ body | Indent 8 ~}}
    }
}
{{~ else ~}}
{{if IsStaticClass}}static {{end}}partial class {{ClassName}}
{
    {{~ body | Indent 4 ~}}
}
{{~ end ~}}
{{~ end ~}}
{{~ if extension_methods ~}}

static partial class {{OuterType}}{{ClassName}}Extensions
{
    {{~ extension_methods | Indent 4 ~}}
}
{{~ end ~}}
{{~ if helper_classes ~}}

{{~ if OuterType ~}}
{{if IsStaticOuter}}static {{end}}partial class {{OuterType}}
{
    {{~ helper_classes | Indent 4 ~}}
}
{{~ else ~}}
{{~ helper_classes | Indent 0 ~}}
{{~ end ~}}
{{~ end ~}}
{{-end-}}
