{{-#####-UTILS-#####-}}

{{-func CurrentIndent(lines)
    for line in lines
        if !(line | string.whitespace)
            ret (line | regex.match('^ *'))[0].size
        end
    end
    ret 0
end-}}

{{-func Indent(text, count)
    pad = " " * count
    lines = text | regex.split '\n'
    current = CurrentIndent(lines)
    for idx in 0..(lines.size - 1)
        if !(lines[idx] | string.whitespace)
            lines[idx] = pad + (lines[idx] | string.slice current)
        end
    end
    ret lines | array.join '\n'
end-}}

{{-func Scope(token = null)-}}
{{~ if token ~}}
{{~ if OuterType ~}}{{OuterType}}.{{ClassName}}.{{token}}{{~ else ~}}{{ClassName}}.{{token}}{{~ end ~}}
{{~ else ~}}
{{~ if OuterType ~}}{{OuterType}}.{{ClassName}}{{~ else ~}}{{ClassName}}{{~ end ~}}
{{~ end ~}}
{{-end-}}

{{-#######################-}}
{{-#####-RenderClass-#####-}}
{{-#######################-}}

{{-func RenderClass(body, xtras=null, make_alias=false)-}}
using System;
using System.ComponentModel;

using Godot;

{{~ Namespace ~}}

{{~ if OuterType ~}}
{{~ if xtras && make_alias ~}}
using static {{OuterType}}.{{ClassName}}; // For extensions

{{~ end ~}}
{{if IsStaticOuter}}static {{end}}partial class {{OuterType}}
{
    {{if IsStaticClass}}static {{end}}partial class {{ClassName}}
    {
        {{~ body | Indent 8 ~}}
    }
}
{{~ else ~}}
{{~ if xtras && make_alias ~}}
using static {{ClassName}}; // For extensions

{{~ end ~}}
{{if IsStaticClass}}static {{end}}partial class {{ClassName}}
{
    {{~ body | Indent 4 ~}}
}
{{~ end ~}}
{{~ if xtras ~}}

static partial class {{OuterType}}{{ClassName}}Extensions
{
    {{~ xtras | Indent 4 ~}}
}
{{~ end ~}}
{{-end-}}
