using System;
using System.Collections.Generic;

{{~ Namespace ~}}

partial class {{ClassName}}
{
    public enum Enum
    {
        {{~ for name in EnumMembers ~}}
        {{ name }}{{ if for.last == false }},{{ end }}
        {{~ end ~}}
    }

    public static readonly Dictionary<object, Enum> MapIdentityToEnum = new()
    {
        {{~ for name in EnumMembers ~}}
        { {{name}}.{{IdentityProperty}}, Enum.{{name}} }{{ if for.last == false }},{{ end }}
        {{~ end ~}}
    };

    public Enum ToEnum()
    {
        if (MapIdentityToEnum.TryGetValue({{IdentityProperty}}, out var enumValue))
            return enumValue;

        throw new ArgumentOutOfRangeException(nameof({{IdentityProperty}}), {{IdentityProperty}}, null);
    }

    public static {{ClassName}} FromEnum(Enum e) => e switch
    {
        {{~ for name in EnumMembers ~}}
        Enum.{{name}} => {{name}},
        {{~ end ~}}
        _ => throw new ArgumentOutOfRangeException(nameof(e), e, null)
    };
}
