{{-#####-STATIC-#####-}}

{{~ func STATIC ~}}
    public const string ShaderPath = "{{ShaderPath}}";
    public static Shader LoadShader() => GD.Load<Shader>(ShaderPath);
    public static ShaderMaterial NewMaterial()
    {
        var material = new ShaderMaterial { Shader = LoadShader() };
        InitMaterial(material);
        return material;
    }

    public static void InitMaterial(ShaderMaterial material)
    {
        if (material is null) throw new ArgumentNullException(nameof(material));
        if (material.Shader is null) throw new InvalidOperationException($"{{Scope}}.InitMaterial() - Null Shader Error [Expected: {ShaderPath}]");
        if (material.Shader.ResourcePath != ShaderPath) throw new InvalidOperationException($"{{Scope}}.InitMaterial() - Shader Mismatch Error [Expected: {ShaderPath}, Found: {material.Shader.ResourcePath}]");

{{~ for x in ShaderUniforms ~}}
        Set{{x.SafeName}}(material, Default.{{x.SafeName}});
{{~ end ~}}
    }
{{~ if ShaderUniforms.size != 0 ~}}

    public static class Default
    {
{{~ for x in ShaderUniforms ~}}
        public static readonly {{x.Type}} {{x.SafeName}} = {{x.Default ?? "default"}};
{{~ end ~}}
    }

{{~ for x in ShaderUniforms ~}}
    public static {{x.Type}} Get{{x.SafeName}}(ShaderMaterial material) => ({{x.Type}}){{if x.IsEnum}}(int){{end}}material.GetShaderParameter(Params.{{x.SafeName}});
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
    public static void Set{{x.SafeName}}(ShaderMaterial material, {{x.Type}} value) => material.SetShaderParameter(Params.{{x.SafeName}}, {{if x.IsEnum}}(int){{end}}value);
{{~ end ~}}

    public static class Params
    {
{{~ for x in ShaderUniforms ~}}
        public static readonly StringName {{x.SafeName}} = "{{x.RawName}}";
{{~ end ~}}
    }
{{~ end ~}}
{{~ if GenerateTests ~}}

    public static void RunTests(System.Collections.Generic.Dictionary<string, object> expected, ShaderMaterial existing = null)
    {
        var sut = existing ?? NewMaterial();
        sut.Shader.ResourcePath.Should().Be(ShaderPath);

        TestInit();
{{~ if ShaderUniforms.size != 0 ~}}
        TestParams();
        TestDefaults();
        TestValues();

        void TestParams()
        {
{{~ for x in ShaderUniforms ~}}
            Params.{{x.SafeName}}.Should().Be((StringName)"{{x.RawName}}");
{{~ end ~}}
        }

        void TestDefaults()
        {
{{~ for x in ShaderUniforms ~}}
            Default.{{x.SafeName}}.Should().Be(({{x.Type}})expected["{{x.SafeName}}.Default"]);
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
            Get{{x.SafeName}}(sut).Should().Be(Default.{{x.SafeName}});
{{~ end ~}}
        }

        void TestValues()
        {
{{~ for x in ShaderUniforms ~}}
            Set{{x.SafeName}}(sut, ({{x.Type}})expected["{{x.SafeName}}.Value"]); Get{{x.SafeName}}(sut).Should().Be(({{x.Type}})expected["{{x.SafeName}}.Value"]);
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
            Set{{x.SafeName}}(sut, Default.{{x.SafeName}}); Get{{x.SafeName}}(sut).Should().Be(Default.{{x.SafeName}});
{{~ end ~}}
        }
{{~ end ~}}

        void TestInit()
        {
            var initWithNullMaterial = () => InitMaterial(null);
            var initWithNullShader = () => InitMaterial(new ShaderMaterial());
            var initWithWrongShader = () => InitMaterial(new ShaderMaterial { Shader = new() });
            var initWithValidShader = () => InitMaterial(new ShaderMaterial { Shader = LoadShader() });

            initWithNullMaterial.Should().Throw<ArgumentNullException>();
            initWithNullShader.Should().Throw<InvalidOperationException>().WithMessage($"*Null Shader Error*{ShaderPath}*");
            initWithWrongShader.Should().Throw<InvalidOperationException>().WithMessage($"*Shader Mismatch Error*{ShaderPath}*");
            initWithValidShader.Should().NotThrow();
        }
    }
{{~ end ~}}
{{~ end ~}}

{{-#####-MATERIAL-#####-}}

{{~ func MATERIAL ~}}
    public const string ShaderPath = "{{ShaderPath}}";
    public static Shader LoadShader() => GD.Load<Shader>(ShaderPath);

    public {{ClassName}}()
    {
        Shader = LoadShader();
{{~ for x in ShaderUniforms ~}}
        {{x.SafeName}} = Default.{{x.SafeName}};
{{~ end ~}}
    }
{{~ if ShaderUniforms.size != 0 ~}}

    public static class Default
    {
{{~ for x in ShaderUniforms ~}}
        public static readonly {{x.Type}} {{x.SafeName}} = {{x.Default ?? "default"}};
{{~ end ~}}
    }
{{~ for x in ShaderUniforms ~}}

    public {{x.Type}} {{x.SafeName}}
    {
        get => ({{x.Type}}){{if x.IsEnum}}(int){{end}}GetShaderParameter(Params.{{x.SafeName}});
        set => SetShaderParameter(Params.{{x.SafeName}}, {{if x.IsEnum}}(int){{end}}value);
    }
{{~ end ~}}

    public static class Params
    {
{{~ for x in ShaderUniforms ~}}
        public static readonly StringName {{x.SafeName}} = "{{x.RawName}}";
{{~ end ~}}
    }
{{~ end ~}}
{{~ if GenerateTests ~}}

    public static void RunTests(System.Collections.Generic.Dictionary<string, object> expected, {{ClassName}} existing = null)
    {
        var sut = existing ?? new();
        sut.Shader.ResourcePath.Should().Be(ShaderPath);
{{~ if ShaderUniforms.size != 0 ~}}

        TestParams();
        TestDefaults();
        TestValues();

        void TestParams()
        {
{{~ for x in ShaderUniforms ~}}
            Params.{{x.SafeName}}.Should().Be((StringName)"{{x.RawName}}");
{{~ end ~}}
        }

        void TestDefaults()
        {
{{~ for x in ShaderUniforms ~}}
            Default.{{x.SafeName}}.Should().Be(({{x.Type}})expected["{{x.SafeName}}.Default"]);
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
            sut.{{x.SafeName}}.Should().Be(Default.{{x.SafeName}});
{{~ end ~}}
        }

        void TestValues()
        {
{{~ for x in ShaderUniforms ~}}
            sut.{{x.SafeName}} = ({{x.Type}})expected["{{x.SafeName}}.Value"]; sut.{{x.SafeName}}.Should().Be(({{x.Type}})expected["{{x.SafeName}}.Value"]);
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
            sut.{{x.SafeName}} = Default.{{x.SafeName}}; sut.{{x.SafeName}}.Should().Be(Default.{{x.SafeName}});
{{~ end ~}}
        }
{{~ end ~}}
    }
{{~ end ~}}
{{~ end ~}}

{{-#####-OTHER-#####-}}

{{~ func OTHER ~}}
    public const string ShaderPath = "{{ShaderPath}}";
    public static Shader LoadShader() => GD.Load<Shader>(ShaderPath);

    public ShaderMaterial Material { get; private init; }

    public static implicit operator ShaderMaterial({{ClassName}} self) => self.Material;
    public static implicit operator {{ClassName}}(ShaderMaterial material) => new(material);

    public {{ClassName}}()
    {
        Material = new ShaderMaterial { Shader = LoadShader() };

{{~ for x in ShaderUniforms ~}}
        {{x.SafeName}} = Default.{{x.SafeName}};
{{~ end ~}}
    }

    public {{ClassName}}(ShaderMaterial material)
    {
        if (material is null) throw new ArgumentNullException(nameof(material));
        if (material.Shader is null) throw new InvalidOperationException($"{{Scope}}.InitMaterial() - Null Shader Error [Expected: {ShaderPath}]");
        if (material.Shader.ResourcePath != ShaderPath) throw new InvalidOperationException($"{{Scope}}.InitMaterial() - Shader Mismatch Error [Expected: {ShaderPath}, Found: {material.Shader.ResourcePath}]");

        Material = material;
    }
{{~ if ShaderUniforms.size != 0 ~}}

    public static class Default
    {
{{~ for x in ShaderUniforms ~}}
        public static readonly {{x.Type}} {{x.SafeName}} = {{x.Default ?? "default"}};
{{~ end ~}}
    }
{{~ for x in ShaderUniforms ~}}

    public {{x.Type}} {{x.SafeName}}
    {
        get => ({{x.Type}}){{if x.IsEnum}}(int){{end}}Material.GetShaderParameter(Params.{{x.SafeName}});
        set => Material.SetShaderParameter(Params.{{x.SafeName}}, {{if x.IsEnum}}(int){{end}}value);
    }
{{~ end ~}}

    public static class Params
    {
{{~ for x in ShaderUniforms ~}}
        public static readonly StringName {{x.SafeName}} = "{{x.RawName}}";
{{~ end ~}}
    }
{{~ end ~}}
{{~ if GenerateTests ~}}

    public static void RunTests(System.Collections.Generic.Dictionary<string, object> expected, {{ClassName}} existing = null)
    {
        var sut = existing ?? new();
        sut.Material.Shader.ResourcePath.Should().Be(ShaderPath);

        TestCtor();
{{~ if ShaderUniforms.size != 0 ~}}
        TestParams();
        TestDefaults();
        TestValues();

        void TestParams()
        {
{{~ for x in ShaderUniforms ~}}
            Params.{{x.SafeName}}.Should().Be((StringName)"{{x.RawName}}");
{{~ end ~}}
        }

        void TestDefaults()
        {
{{~ for x in ShaderUniforms ~}}
            Default.{{x.SafeName}}.Should().Be(({{x.Type}})expected["{{x.SafeName}}.Default"]);
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
            sut.{{x.SafeName}}.Should().Be(Default.{{x.SafeName}});
{{~ end ~}}
        }

        void TestValues()
        {
{{~ for x in ShaderUniforms ~}}
            sut.{{x.SafeName}} = ({{x.Type}})expected["{{x.SafeName}}.Value"]; sut.{{x.SafeName}}.Should().Be(({{x.Type}})expected["{{x.SafeName}}.Value"]);
{{~ end ~}}

{{~ for x in ShaderUniforms ~}}
            sut.{{x.SafeName}} = Default.{{x.SafeName}}; sut.{{x.SafeName}}.Should().Be(Default.{{x.SafeName}});
{{~ end ~}}
        }
{{~ end ~}}

        void TestCtor()
        {
            var ctorWithNullMaterial = () => new {{ClassName}}(null);
            var ctorWithNullShader = () => new {{ClassName}}(new ShaderMaterial());
            var ctorWithWrongShader = () => new {{ClassName}}(new ShaderMaterial { Shader = new() });
            var ctorWithValidShader = () => new {{ClassName}}(new ShaderMaterial { Shader = LoadShader() });

            ctorWithNullMaterial.Should().Throw<ArgumentNullException>();
            ctorWithNullShader.Should().Throw<InvalidOperationException>().WithMessage($"*Null Shader Error*{ShaderPath}*");
            ctorWithWrongShader.Should().Throw<InvalidOperationException>().WithMessage($"*Shader Mismatch Error*{ShaderPath}*");
            ctorWithValidShader.Should().NotThrow();
        }
    }
{{~ end ~}}
{{~ end ~}}

{{-#####-CONTENT-#####-}}

{{~ capture body ~}}
{{~ if IsStatic ~}}
{{ STATIC }}
{{~ else if IsMaterial ~}}
{{ MATERIAL }}
{{~ else ~}}
{{ OTHER }}
{{~ end ~}}
{{~ end ~}}

{{-#####-MAIN-#####-}}

{{~ if GenerateTests ~}}
using FluentAssertions;
{{~ end ~}}

{{~ RenderClass body ~}}
