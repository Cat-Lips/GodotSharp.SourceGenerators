{{-
func visible(node)
    ret node.Value.Visible
end
-}}

{{- func render_unique(node) ~}}
{{NSIndent}}    [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}    private {{node.Type}} _{{node.Name}};

{{NSIndent}}    public {{node.Type}} {{node.Name}} => _{{node.Name}} ??=
{{NSIndent}}        GetNodeOrNull<{{node.Type}}>("%{{node.Path | string.split '/' | array.last}}");

{{~ end -}}

{{- func render_leaf(node, indent) ~}}

{{NSIndent}}{{indent}}        [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}{{indent}}        private {{node.Value.Type}} _{{node.Value.Name}};

{{NSIndent}}{{indent}}        public {{node.Value.Type}} {{node.Value.Name}} => _{{node.Value.Name}} ??=
{{NSIndent}}{{indent}}            node.GetNodeOrNull<{{node.Value.Type}}>("{{node.Value.Path}}");
{{~ end -}}

{{- func render_branch(node, depth, indent) ~}}

{{NSIndent}}{{indent}}        [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}{{indent}}        private __{{depth}}_{{node.Value.Name}} _{{depth}}_{{node.Value.Name}};

{{NSIndent}}{{indent}}        public __{{depth}}_{{node.Value.Name}} {{node.Value.Name}}
{{NSIndent}}{{indent}}            => _{{depth}}_{{node.Value.Name}} ??= new(node);

{{NSIndent}}{{indent}}        [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}{{indent}}        public class __{{depth}}_{{node.Value.Name}}
{{NSIndent}}{{indent}}        {
{{NSIndent}}{{indent}}            private readonly Godot.Node node;

{{NSIndent}}{{indent}}            public __{{depth}}_{{node.Value.Name}}(Godot.Node node)
{{NSIndent}}{{indent}}                => this.node = node;

{{NSIndent}}{{indent}}            [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}{{indent}}            private {{node.Value.Type}} _{{depth}}_{{node.Value.Name}};

{{NSIndent}}{{indent}}            public {{node.Value.Type}} Get() => _{{depth}}_{{node.Value.Name}} ??=
{{NSIndent}}{{indent}}                node.GetNodeOrNull<{{node.Value.Type}}>("{{node.Value.Path}}");

{{NSIndent}}{{indent}}            public static implicit operator {{node.Value.Type}}(__{{depth}}_{{node.Value.Name}} source)
{{NSIndent}}{{indent}}                => source.Get();
{{~
    for child in node.Children | array.filter @visible
        render_tree child depth + 1 indent + "    "
    end
~}}
{{NSIndent}}{{indent}}        }
{{~ end -}}

{{-
func render_tree(node, depth=0, indent="")
    if node.Children | array.filter @visible | array.size == 0
        render_leaf node indent
    else
        render_branch node depth indent
    end
end
-}}

using System.ComponentModel;

{{~NSOpen~}}
{{NSIndent}}partial class {{ClassName}}
{{NSIndent}}{
{{~
for node in UniqueNodes
    render_unique node
end
~}}
{{NSIndent}}    [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}    private _SceneTree _sceneTree;

{{NSIndent}}    private _SceneTree _ => _sceneTree ??= new(GetSceneRoot());

{{NSIndent}}    private Godot.Node GetSceneRoot()
{{NSIndent}}    {
{{NSIndent}}        Godot.Node sceneRoot = this;
{{NSIndent}}        while (true)
{{NSIndent}}        {
{{NSIndent}}            foreach (var candidatePath in _ScriptNodePaths)
{{NSIndent}}            {
{{NSIndent}}                if (sceneRoot.GetNodeOrNull(candidatePath) == this)
{{NSIndent}}                {
{{NSIndent}}                    return sceneRoot;
{{NSIndent}}                }
{{NSIndent}}            }
{{NSIndent}}
{{NSIndent}}            sceneRoot = sceneRoot.GetParent();
{{NSIndent}}            if (sceneRoot is null)
{{NSIndent}}            {
{{NSIndent}}                throw new System.InvalidOperationException("Failed to find scene root.");
{{NSIndent}}            }
{{NSIndent}}        }
{{NSIndent}}    }

{{NSIndent}}    private static readonly string[] _ScriptNodePaths = [{{ func wrap;ret $'"{$0}"'; end; ScriptNodePaths | array.each @wrap | array.join ", " }}];

{{NSIndent}}    [EditorBrowsable(EditorBrowsableState.Never)]
{{NSIndent}}    private class _SceneTree
{{NSIndent}}    {
{{NSIndent}}        private readonly Godot.Node node;

{{NSIndent}}        public _SceneTree(Godot.Node node)
{{NSIndent}}            => this.node = node;
{{~
for node in SceneTree.Children | array.filter @visible
    render_tree node
end
~}}
{{NSIndent}}    }
{{NSIndent}}}
{{~NSClose~}}
