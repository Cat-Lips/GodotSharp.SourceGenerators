{{-
func visible(node)
    ret node.Value.Visible
end
-}}

{{- func render_unique(node) ~}}
        [EditorBrowsable(EditorBrowsableState.Never)]
        private {{node.Type}} _{{node.Name}};

        public {{node.Type}} {{node.Name}} => _{{node.Name}} ??=
            GetNodeOrNull<{{node.Type}}>("%{{node.Path | string.split '/' | array.last}}");

{{~ end -}}

{{- func render_leaf(node, indent) ~}}

{{indent}}            [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}            private {{node.Value.Type}} _{{node.Value.Name}};

{{indent}}            public {{node.Value.Type}} {{node.Value.Name}} => _{{node.Value.Name}} ??=
{{indent}}                node.GetNodeOrNull<{{node.Value.Type}}>("{{node.Value.Path}}");
{{~ end -}}

{{- func render_branch(node, depth, indent) ~}}

{{indent}}            [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}            private __{{depth}}_{{node.Value.Name}} _{{depth}}_{{node.Value.Name}};

{{indent}}            public __{{depth}}_{{node.Value.Name}} {{node.Value.Name}}
{{indent}}                => _{{depth}}_{{node.Value.Name}} ??= new(node);

{{indent}}            [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}            public class __{{depth}}_{{node.Value.Name}}
{{indent}}            {
{{indent}}                private readonly Godot.Node node;

{{indent}}                public __{{depth}}_{{node.Value.Name}}(Godot.Node node)
{{indent}}                    => this.node = node;

{{indent}}                [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}                private {{node.Value.Type}} _{{depth}}_{{node.Value.Name}};

{{indent}}                public {{node.Value.Type}} Get() => _{{depth}}_{{node.Value.Name}} ??=
{{indent}}                    node.GetNodeOrNull<{{node.Value.Type}}>("{{node.Value.Path}}");

{{indent}}                public static implicit operator {{node.Value.Type}}(__{{depth}}_{{node.Value.Name}} source)
{{indent}}                    => source.Get();
{{~
    for child in node.Children | array.filter @visible
        render_tree child depth + 1 indent + "    "
    end
~}}
{{indent}}            }
{{~ end -}}

{{-
func render_tree(node, depth=0, indent="")
    if node.Children | array.filter @visible | array.size == 0
        render_leaf node indent
    else
        render_branch node depth indent
    end
end
-}}

using System.ComponentModel;

namespace {{Namespace}}
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    class {{ClassName}}
    {
{{~
for node in UniqueNodes
    render_unique node
end
~}}
        private readonly Godot.Node node;

        public {{ClassName}}(Godot.Node node)
        => this.node = node;
{{~
for node in SceneTree.Children | array.filter @visible
    render_tree node
end
~}}
    }
}
