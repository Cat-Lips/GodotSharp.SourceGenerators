{{-
    func generate_property_tree(node, depth=0, indent="        ")
        if node.Children.Count == 0
            indent+"[EditorBrowsable(EditorBrowsableState.Never)] private "+node.Type+" _"+node.Name+";\n"
            indent+"public "+node.Type+" "+node.Name+" => _"+node.Name+" ??= root.GetNode<"+node.Type+">(\""+node.Path+"\");\n"
        else
            class_name = "__SceneTreeNode_"+node.Name+"_"+depth
            indent+"public "+class_name+" "+node.Name+" => _"+node.Name+" ??= new(root);\n"
            indent+"[EditorBrowsable(EditorBrowsableState.Never)] private "+class_name+" _"+node.Name+";\n"
            indent+"[EditorBrowsable(EditorBrowsableState.Never)] public class "+class_name+"\n"
            indent+"{\n"
            indent+"    private readonly Node root;\n"
            indent+"    public "+class_name+"(Node root) => this.root = root;\n"
            indent+"    public "+node.Type+" Get() => root.GetNode<"+node.Type+">(\""+node.Path+"\");\n"
                        for child in node.Children
                            generate_property_tree child (depth + 1) (indent + "    ")
                        end
            indent+"}\n"
        end
    end
-}}

using System;
using System.ComponentModel;

using Godot;

{{~NSOpen~}}
{{NSIndent}}partial class {{ClassName}}
{{NSIndent}}{
{{NSIndent}}    private __SceneTreeRoot _ => __sceneTreeRoot ??= new(this);
{{NSIndent}}    [EditorBrowsable(EditorBrowsableState.Never)] private __SceneTreeRoot __sceneTreeRoot;
{{NSIndent}}    [EditorBrowsable(EditorBrowsableState.Never)] private class __SceneTreeRoot
{{NSIndent}}    {
{{NSIndent}}        private readonly Node root;
{{NSIndent}}        public __SceneTreeRoot(Node root) => this.root = root;
{{NSIndent}}        {{~ for p in Properties ~}}
{{NSIndent}}        {{~ generate_property_tree p ~}}
{{NSIndent}}        {{~ end ~}}
{{NSIndent}}    }
{{NSIndent}}}
{{~NSClose~}}
