{{-
func visible(node)
    ret node.Value.Visible
end
-}}

{{- func render_unique(node) ~}}
    [EditorBrowsable(EditorBrowsableState.Never)]
    private {{node.Type}} _{{node.Name}};

    public {{node.Type}} {{node.Name}} => _{{node.Name}} ??=
        GetNodeOrNull<{{node.Type}}>("%{{node.Path | string.split '/' | array.last}}");

{{~ end -}}

{{- func render_leaf(node, indent) ~}}

{{indent}}        [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}        private {{node.Value.Type}} _{{node.Value.Name}};

{{indent}}        public {{node.Value.Type}} {{node.Value.Name}} => _{{node.Value.Name}} ??=
{{indent}}            _root.GetNodeOrNull<{{node.Value.Type}}>("{{node.Value.Path}}");
{{~ end -}}

{{- func render_branch(node, depth, indent) ~}}

{{indent}}        [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}        private __{{depth}}_{{node.Value.Name}} _{{depth}}_{{node.Value.Name}};

{{indent}}        public __{{depth}}_{{node.Value.Name}} {{node.Value.Name}}
{{indent}}            => _{{depth}}_{{node.Value.Name}} ??= new(_root);

{{indent}}        [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}        public class __{{depth}}_{{node.Value.Name}}
{{indent}}        {
{{indent}}            private readonly {{SceneTree.Root.Type}} _root;

{{indent}}            public __{{depth}}_{{node.Value.Name}}({{SceneTree.Root.Type}} root)
{{indent}}                => _root = root;

{{indent}}            [EditorBrowsable(EditorBrowsableState.Never)]
{{indent}}            private {{node.Value.Type}} _{{depth}}_{{node.Value.Name}};

{{indent}}            public {{node.Value.Type}} Get() => _{{depth}}_{{node.Value.Name}} ??=
{{indent}}                _root.GetNodeOrNull<{{node.Value.Type}}>("{{node.Value.Path}}");

{{indent}}            public static implicit operator {{node.Value.Type}}(__{{depth}}_{{node.Value.Name}} source)
{{indent}}                => source.Get();
{{~
    for child in node.Children | array.filter @visible
        render_tree child depth + 1 indent + "    "
    end
~}}
{{indent}}        }
{{~ end -}}

{{-
func render_tree(node, depth=0, indent="")
    if node.Children | array.filter @visible | array.size == 0
        render_leaf node indent
    else
        render_branch node depth indent
    end
end
-}}

using System.ComponentModel;

{{~ Namespace ~}}

partial class {{ClassName}}
{
#pragma warning disable CS0109 // Disable warning about redundant 'new' keyword
    public static new string TscnFilePath { get; } = "{{TscnResource}}";
#pragma warning restore CS0109 // Restore warning about redundant 'new' keyword

{{~
for node in UniqueNodes
    render_unique node
end
~}}
    [EditorBrowsable(EditorBrowsableState.Never)]
    private _SceneTree _sceneTree;

    private _SceneTree {{Root}} => _sceneTree ??= new(this);

    [EditorBrowsable(EditorBrowsableState.Never)]
    private class _SceneTree
    {
        private {{SceneTree.Root.Type}} _root;

        public _SceneTree({{ClassName}} source)
        {
            _root = GetSceneRoot(source);

            {{SceneTree.Root.Type}} GetSceneRoot(Godot.Node source)
            {
                while (true)
                {
#if GODOT4_OR_GREATER
                    if (source.SceneFilePath is "{{TscnResource}}")
#else
                    if (source.Filename is "{{TscnResource}}")
#endif
                        return ({{SceneTree.Root.Type}})source;
                    var parent = source.GetParent();
                    if (parent is null)
                        Throw($"{source.Name} returned null parent");
                    source = parent;
                }
            }

            static void Throw(string msg)
                => throw new System.InvalidOperationException($"Could not find scene root ({{ClassName}} can only be used within {{TscnResource}}) [Error: {msg}]");
        }

        public {{SceneTree.Root.Type}} Get()
            => _root;

        public static implicit operator {{SceneTree.Root.Type}}(_SceneTree source)
            => source.Get();
{{~
for node in SceneTree.Children | array.filter @visible
    render_tree node
end
~}}
    }
}
